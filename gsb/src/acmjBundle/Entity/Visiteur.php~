<?php

namespace acmjBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * Visiteur
 *
 * @ORM\Table(name="visiteur", indexes={@ORM\Index(name="I_FK_VISITEUR_COMPTABLE", columns={"ID_GERER"})})
 * @ORM\Entity
 */
class Visiteur implements UserInterface,\Serializable
{
    /**
     * @var string
     *
     * @ORM\Column(name="ID", type="string", length=128, nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @var integer
     *
     * @ORM\Column(name="ID_GERER", type="integer", nullable=false)
     */
    private $idGerer;

    /**
     * @var string
     *
     * @ORM\Column(name="NOMVISITEUR", type="string", length=128, nullable=true)
     */
    private $nomvisiteur;

    /**
     * @var string
     *
     * @ORM\Column(name="PRENOMVISITEUR", type="string", length=128, nullable=true)
     */
    private $prenomvisiteur;

    /**
     * @var string
     *
     * @ORM\Column(name="LOGINVISITEUR", type="string", length=128, nullable=true)
     */
    private $loginvisiteur;

    /**
     * @var string
     *
     * @ORM\Column(name="MDPVISITEUR", type="string", length=128, nullable=true)
     */
    private $mdpvisiteur;

    /**
     * @var string
     *
     * @ORM\Column(name="ADRVISITEUR", type="string", length=128, nullable=true)
     */
    private $adrvisiteur;

    /**
     * @var string
     *
     * @ORM\Column(name="CPVISITEUR", type="string", length=5, nullable=true)
     */
    private $cpvisiteur;

    /**
     * @var string
     *
     * @ORM\Column(name="VILLEVISITEUR", type="string", length=128, nullable=true)
     */
    private $villevisiteur;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="DATEEMBAUCHE", type="date", nullable=true)
     */
    private $dateembauche;


    /**
     * @var \boolean
     *
     * @ORM\Column(name="comptable", type="boolean", nullable=true)
     */
    private $comptable;


    /**
     * String representation of object
     * @link https://php.net/manual/en/serializable.serialize.php
     * @return string the string representation of the object or null
     * @since 5.1.0
     */
    public function setUsername($loginvisiteur)
    {
        $this->loginvisiteur = $loginvisiteur;

        return $this;
    }

    /**
     * Get username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->loginvisiteur;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return Utilisateur
     */
    public function setPassword($mdpvisiteur)
    {
        $this->mdpvisiteur = $mdpvisiteur;

        return $this;
    }

    /**
     * Get password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->mdpvisiteur;
    }

    /**
     * Returns the roles granted to the user.
     *
     *     public function getRoles()
     *     {
     *         return array('ROLE_USER');
     *     }
     *
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     *
     * @return (Role|string)[] The user roles
     */
    public function getRoles()
    {

        if ($this->comptable == false) {
            return ['ROLE_USER'];
        } else {
            return ['ROLE_ADMIN'];
        }
    }

    public function setRoles ($roles) {
        $this->roles = $roles;

        return $this;
    }


    /**
     * Returns the salt that was originally used to encode the password.
     *
     * This can return null if the password was not encoded using a salt.
     *
     * @return string|null The salt
     */
    public function getSalt()
    {
        return null;
    }

    /**
     * Removes sensitive data from the user.
     *
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     */
    public function eraseCredentials()
    {
        // TODO: Implement eraseCredentials() method.
    }

    /**
     * String representation of object
     * @link https://php.net/manual/en/serializable.serialize.php
     * @return string the string representation of the object or null
     * @since 5.1.0
     */
    public function serialize()
    {
        return serialize([
            $this->id,
            $this->loginvisiteur,
            $this->mdpvisiteur
        ]);
    }

    /**
     * Constructs the object
     * @link https://php.net/manual/en/serializable.unserialize.php
     * @param string $serialized <p>
     * The string representation of the object.
     * </p>
     * @return void
     * @since 5.1.0
     */
    public function unserialize($serialized)
    {
        list ($this->id,
            $this->loginvisiteur,
            $this->mdpvisiteur
            ) = unserialize($serialized, ['allowed_classes' => false]);
    }




}

